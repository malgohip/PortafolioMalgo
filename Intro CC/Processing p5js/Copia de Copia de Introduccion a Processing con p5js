{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1x1j9UGzRZ16nIqhW0DXElbazjmtuoPVx","timestamp":1724335509309},{"file_id":"14Dwop-vWHTJkQ1wOPwDVhv9LthuRb3b5","timestamp":1724335301767}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["\n","  **Notas de Clase**\n","  \n"," **PROCESSING CON P5JS**\n","\n","  **Preparadas por Humberto Sarria**\n","\n","  **Universidad Nacional de Colombia**\n","\n","  **Departamento de Matemáticas**"],"metadata":{"id":"wO4Du7kNcQk-"}},{"cell_type":"markdown","source":["#1 INTRODUCCIÓN\n","\n","Processing es un paquete de código abierto, que permite el diseño y procesamiento de gráficos, imágenes y videos. Haremos una introducción muy básica a este paquete.\n","En esta sección, presentaremos algunos comandos y códigos en Processing, sin embargo, aclaramos que estos códigos NO pueden ejecutarse sobre Google Colab. Trabajaremos baja la plataforma P5jS que puede encontrarse en la dirección https://p5js.org/ . Es importante que el estudiante cree una cuenta, para esto, debe localizar sobre la margen izquierda la pestaña ` Star<\\>Coding ` , luego de dar clic sobre esta, luego ingrese via la pestaña  `Log in`.\n"],"metadata":{"id":"oObBcjEvclPG"}},{"cell_type":"markdown","source":["#1.1 Comandos básicos\n","\n"," En esta plataforma, todo código debe comenzar con la definición de la función setup(). La primera instrucción de esta función es `createCanvas()`, con esta función podemos  diseñar la ventana de trabajo. Para indicar las dimensiones de la ventana, usamos la sintaxis ` createCanvas(m,n)`, donde `m` y `n` corresponden al número de pixeles que tendrán el ancho y alto de la ventana, respectivamente. Seguidamente, se introduce la función `draw()` que permite ejecutar ciclos de instrucciones.\n","\n","\n","**Nota**\n","1. Un pixel corresponde a la unidad mínima de \"color homogeneo\" que conforma una imagen digital, un pixel está conformado por la mezcla de los colores básicos rojo, verde y azul. Estos colores se designan por la sigla RGB, que refiere a los nombres de los colores en inglés, es decir, red, green y blue. Si se mira con una lupa la pantalla de un computador, podrán distinguirse para cada pixel las intensidades de esta tripla de colores básicos.\n","2.Toda instrucción dentro de las funciones debe terminar con punto y coma."],"metadata":{"id":"hFKxxMyOrhrq"}},{"cell_type":"markdown","source":["**Ejemplo 1**\n","\n","Diseñemos una ventana de 500 pixeles de ancho por 500 pixeles de alto. A su vez pintaremos la ventana de color gris; para esto usaremos el comando `background(n)` en donde $n$ denota la intensidad de la tonalidad de gris; que puede ir blanco puro que corresponde a $0$ a negro puro que corresponde a $255$."],"metadata":{"id":"FoYCMEGd4YEs"}},{"cell_type":"code","source":["#####################################################\n","### NO EJECUTAR ESTE CÒDIGO SOBRE ESTA PLATAFORMA ###\n","#####################################################\n","\n","function setup() {\n","  createCanvas(500, 500);\n","}\n","\n","function draw() {\n","  background(220);\n","}"],"metadata":{"id":"JYVEyma65JKb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Una vez ejecute el código, observe que el resultado se muestra sobre el lado derecho de la interface bajo la sección `preview`. Todo mensaje en texto que contenga el código se mostrará en la parte inferior de la interface en la sección `console`."],"metadata":{"id":"oAbXx2UE3eQI"}},{"cell_type":"markdown","source":["**Puntos, Segmentos, Rectángulos y Elipses**\n","\n","Para pintar puntos, segmentos, rectángulos y elipses, usamos los siguientes comandos:\n","*  `point(x,y)` permite pintar un punto sobre la ventana, siendo $x$ y $y$ sus  coordenadas.\n","*  `line(x,y,z,w)` permite pintar un segmento de recta, siendo $A(x,y)$ y $B(w,z)$ las coordenadas de los extremos del segmento.\n","* `rect(x,y,a,h)` permite pintar un rectángulo, siendo $A(x,y)$ las coordendadas del vértices superior izquierdo, $a$ el ancho y $h$ la altura.\n","* `ellipse(x,y,a,h)` permite pintar una elipse, siendo $C(x,y)$ las coordendadas del centro de la elipse, $a$ el ancho y $h$ la altura.\n","\n","**Nota:** Aun cuando la funciòn `rect()` usa por defecto la esquina superior izquierda para dibujar un rectàngulo, es posible redefinir esta referencia y usar las coordenadas del centro del rectàngulo. Con el fin de realizar este cambio de referencia, debe usarse previamente el comando `rectMode(CENTER);`\n","\n","**Ejemplo 2**\n","Sobre una ventana de 500x500, pintar :\n","* un punto de coordenadas $A(250,250)$.\n","* un segmento que pase por los puntos de coordenadas $A(100,0)$ y  $B(250,150) $.\n","* un rectángulo con vértice superior izquierdo en el punto $A(300,50)$ de ancho y altura 100.\n","* una elipse con centro en $C(250,300)$ ancho 100 y altura 50."],"metadata":{"id":"amK9JcHt4Syg"}},{"cell_type":"code","source":["#####################################################\n","### NO EJECUTAR ESTE CÒDIGO SOBRE ESTA PLATAFORMA ###\n","#####################################################\n","\n","function setup() {\n","  createCanvas(500, 500);\n","}\n","\n","function draw() {\n","  background(220);\n","  point(250, 250);\n","  line(100, 0, 250, 150);\n","  rect(300, 50, 100, 100);\n","  ellipse(250, 300, 100, 50);\n","}"],"metadata":{"id":"xjvR5KHi4bjE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["![texto alternativo](https://drive.google.com/uc?id=12oIyBvbiow2BhdyLEJxfSV4JZsKAmkeb)."],"metadata":{"id":"zsaP0tIO3cy9"}},{"cell_type":"markdown","source":["**Ejemplo 3**\n","\n","Pinte una serie de segmentos de recta con extremos sobre los puntos de coordenadas $A(500-i,0)$ $B(0,i)$ y , para $i=0,10,20\\ldots,500$."],"metadata":{"id":"k-2yvJlJ6De4"}},{"cell_type":"code","source":["function setup(){\n","    createCanvas(500,500);\n","}\n","function draw(){\n","     for (let i=0;i<510; i+=10 )\n","        line(500-i,0,0,i);\n","}"],"metadata":{"id":"u6XJPRGP6FSF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["![texto alternativo](https://drive.google.com/uc?id=1TZnVR3R8DAQwHvU1PTf0ZlKZBWbARexK)."],"metadata":{"id":"IXlwkdQnPeTU"}},{"cell_type":"markdown","source":["## 1.2 Configuración de Ventanas\n","\n","En la introducción vimos que el comando `createCanvas()`, permite mostrar y definir el tamaño de una ventana, además `createCanvas()` debe ser la primera instrucción de la función `setup()`.\n","\n","*  `background(v1,v2,v3)` permite escoger el color del fondo de la ventana.  v1,v2 y v3 son valores numéricos enteros entre 0 y 255, y corresponden a tonalidades de los colores básicos: **rojo, verde y azul** (RGB), respectivamente. Se usa como intrucción de las funciones `setup()` y `draw()`. Este comando también puede trabajarse para que reporte tonalidades de grises, en este caso el argumento es un único valor, siendo el valor 0 el correspondiente a negro y el valor 255 a blanco.\n","\n","* `stroke(v1,v2,v3)` permite determinar el color de los bordes de una figura.\n","\n","* `noStroke()` elimina los bordes de la figura.\n","\n","* `strokeWeight(<valor>) ` permite pintar los bordes de una figura con mayor espesor. El espesor está dado por `<valor>` en pixeles.\n","\n","**Nota** Por defecto el color de toda ventana es gris claro.\n","\n","**Ejemplo 1**\n","\n","Diseñe el color de fondo de una ventana, con una combinación de tonalidades de orden 200, 100 y 50, para  los colores  rojo, verde y azul, respectivamente."],"metadata":{"id":"1DgmDnO1G1rj"}},{"cell_type":"code","source":["function setup() {\n","  createCanvas(400, 400);\n","}\n","\n","function draw() {\n","  background(200, 100, 50);\n","}"],"metadata":{"id":"OfnDwQ1fHhoU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Ejemplo 2**\n","\n","Pinte el borde de un rectángulo de rojo, el de una elipse verde y un punto azul."],"metadata":{"id":"Uht8_JHVH4oZ"}},{"cell_type":"code","source":["function setup() {\n","  createCanvas(500, 500);\n","}\n","function draw(){\n","    stroke(255,0,0);\n","    rect(200,200,100,100);\n","    stroke(0,255,0);\n","    ellipse(250,250,80,40);\n","    stroke(0,0,255);\n","    point(250,250);\n","}"],"metadata":{"id":"kQx5aXrNH6cG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 1.3 Imágenes Dinámicas\n","\n","Processing tiene una gran variedad de funciones y comandos que permiten mostrar imágenes de manera dinámica. A continuación describiremos sólo unas pocas herramientas, para mayor información consultar un libro de referencia en Processing.\n","\n","* Para detener el proceso cíclico inciado con la funciòn `draw()` puede usarse el comando  `noloop()` o los comandos `mouseX` y `mouseY`.\n","\n","* `noloop()` detiene los ciclos de la función `draw()`.\n","\n","* `loop()` activa la función `draw()`, si ésta ha sido desactivada.\n","\n","* `mouseX` y `mouseY` retornan un valor entero correspondiente a las posiciones horizontal y vertical del mouse, dentro de la ventana de trabajo.\n","\n","* `millis()` retorna el tiempo en milisegundos  del reloj interno del procesador. En algunos algoritmos dinámicos puede incluirse esta función con el fin de retrasar el proceso, de esta manera un gráfico iterativo adquiere un aspecto dinámico o de movimiento.\n","\n","* `delay(<valor>)` permite detener un proceso un tiempo determinado por `<valor>` medido en milisegundos. Puede usarse para dar a los gráficos secuenciales un aspecto dinámico.\n","\n","**Ejemplo 1**\n","\n","Pintar una ellipse de centro en $(200,200)$ y ancho y largo determinado por la posición del mouse. No se anexa imagen."],"metadata":{"id":"5xfsEUAOIWbM"}},{"cell_type":"code","source":["function setup() {\n","  createCanvas(500, 500);\n","}\n","function draw(){\n","    background(200, 100, 50);\n","    ellipse(200,200,mouseX,mouseY);\n","}"],"metadata":{"id":"OIaptSREI8qf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Responda las siguientes preguntas respecto al ejemplo anterior.\n","\n","Qué sucede, si:\n","* Deja el mouse por fuera del recuadro de 400x400. Explique su respuesta.\n","* Mueva el mouse sobre la recta Y = X. Qué se obtiene?\n","* Cambia la instrucción `background(200, 100, 50)` de posición y la deja como instrucción de la función `setup()`.\n","\n","**Ejemplo 2**\n","\n","En el siguiente programa se pinta sobre una ventana de 400x400 puntos de color rojo de manera aleatoria. En este caso se puede ver el proceso debido a que la función `millis()`  retraza un poco el proceso."],"metadata":{"id":"OiaklxpzJmVg"}},{"cell_type":"code","source":["let contador = 1;\n","function setup() {\n","  createCanvas(500, 500);\n","}\n","function draw(){\n","    PuntosRandom();\n","}\n","function PuntosRandom(){\n","        stroke(255,0,0); //Permite pintar los puntos con color rojo\n","        if (contador  <= 1000)\n","        {\n","             let X=  random(20,380);\n","             let Y=  random(20,380);\n","             let temporizador=millis();\n","             point(X, Y);\n","             contador +=1;\n","        }\n","        else\n","        {\n","             print(\"Proceso Terminado...\\n\");\n","             noLoop();\n","        }\n","}"],"metadata":{"id":"4TuukAG-Jyoj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["![texto alternativo](https://drive.google.com/uc?id=1WRkUygVqVMumipSr12q7i6rlHs12D6Gt)\n"],"metadata":{"id":"JxEkkSv2LjUA"}},{"cell_type":"markdown","source":["**Ejemplo 3**\n","\n","Pintar puntos de distintos colores de manera aleatoria sobre una ventana de 500x500."],"metadata":{"id":"z7lq2bdzL4ZH"}},{"cell_type":"code","source":["// NO EJECUTADOR EL PROGRAMA SOBRE ESTA PLATAFORMA, HACERLO SOBRE PROCESSING !!!!!!\n","let contador = 1;\n","function setup() {\n","  createCanvas(500, 500);\n","}\n","function draw(){\n","    PuntosRandom();\n","}\n","\n","\n","function PuntosRandom(){\n","\n","        strokeWeight(10); //aumenta el diametro del punto pintado en 10 pixels\n","        if (contador  <= 1000)\n","        {\n","             let Rojo =  random(0,255);  //Se elijen los tonos de los colores rojo, verde y azul de manera aleatoria.\n","             let Verde = random(0,255);\n","             let Azul =  random(0,255);\n","             stroke(Rojo,Verde,Azul);\n","             let X= random(20,380);\n","             let Y= random(20,380);\n","             let temporizador=millis();\n","             point(X, Y);\n","             contador +=1;\n","        }\n","        else\n","        {\n","             print(\"Proceso Terminado...\\n\");\n","             noLoop();\n","        }\n","}"],"metadata":{"id":"wCBv32LAMCek"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["![texto alternativo](https://drive.google.com/uc?id=15nIL8Bj-oJzscdz7xm3J_Hg4mktlUfBk)"],"metadata":{"id":"KOvC3_ekMztB"}},{"cell_type":"markdown","source":["**Ejemplo 4**\n","\n","Realizamos el Ejemplo 3 de la secciòn 1.1 en forma dinàmica. En este caso retrazamos el proceso usando el comando `millis()."],"metadata":{"id":"K-uFzlEqNFqo"}},{"cell_type":"code","source":["let i = 0;\n","function setup(){\n","    createCanvas(500, 500);\n","    background(255); // Blanco para el fondo de la ventana\n","}\n","\n","function  draw(){\n","    Segmentos();\n","}\n","\n","function Segmentos(){\n","        stroke(255,0,0);\n","        if (i  <= 500)\n","        {\n","             let temporizador=millis();\n","             line(500-i,0,0,i);\n","             temporizador=millis();\n","             i +=10;\n","        }\n","        else\n","        {\n","             print(\"Proceso Terminado...\\n\");\n","             noLoop();\n","        }\n","}"],"metadata":{"id":"UxV8WanpNGKE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Ejemplo 5.** Dibujar sobre una ventana de 500 por 500: un cuadrado, un cìrculo y un triàngulo. Estos deberàn aparacer sobre la ventana dependiendo de la posiciòn de la abscisa $x$ del mouse de manera tal que, si el mouse està en el primer tercio aparezca el cuadrado, si està sobre el segundo tercio aparecerà el cìrculo y en el ùltimo tercio deberà aparecer el triàngulo."],"metadata":{"id":"zPicMG6GTDb8"}},{"cell_type":"code","source":["//En este còdigo usaremos tres constantes predefinidas: CENTER, width y height\n","// CENTER se refiere a las coordenadas del centro de la ventana previamente definida\n","// width y height a su ancho y largo respectivamente\n","\n","function setup(){\n","    createCanvas(500, 500);\n","}\n","function draw(){\n","    background(255);\n","    fill(0); //llena con negro el interior de las figuras\n","    noStroke(); // elimina los bordes de las figuras\n","    if (mouseX < width/3){\n","        rectMode(CENTER); // rectMode  permite redefinir\n","                          // el diseño de un rectàngulo, siendo la referencia su centro\n","                          // en vez de su esquina superior izquierda\n","        square(width/2, height/2, 400);\n","    }\n","    else if (mouseX < 2*width/3){\n","        circle(width/2, height/2, 400);\n","    }\n","    else{\n","        triangle(250,50,450,450,50,450);\n","    }\n","}"],"metadata":{"id":"QlR9IsWXULAL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#1.4 Creación de una herramienta de dibujo\n","\n","En esta sección desarrollaremos varios códigos que le permitirán al usuario usar el mouse para la creación de dibujos.\n","\n","**Ejemplo 1.** Creación de un código que muestra los trazos de un círculo que se mueve conforme se mueve en mouse."],"metadata":{"id":"i7nqOzHT40rK"}},{"cell_type":"code","source":["function setup(){\n","    createCanvas(500, 500);\n","    background(0); //El fondo de la pantalla queda de color negro para todo ciclo\n","}\n","function draw(){\n","    fill(0); //Toda figura cerrada queda llena por el color negro\n","    stroke(255); //Los bordes de toda figura serán blancos\n","    strokeWeight(2); //Ancho de figuras quedan conformados por dos pixeles\n","    circle(mouseX, mouseY, 50);//creación dinámica de circunferencias con radio 50\n","}"],"metadata":{"id":"Fir8F8bj5j0O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Ejemplo 2.** El código en este ejemplo es similar al del ejemplo anterio con la diferencia de que sólo se dibujará circulos si se mantiene el mouse oprimido. En este caso usaremos la variable boolean `mopuseIsPresed` que tomas los valores true o false, según si el mouse está oprimido o no. En tales casos, pintará o dejará de pintar. Al final el còdigo podrà guardar el dibujo generado por el usuario en formato png."],"metadata":{"id":"9gh6y07p7McF"}},{"cell_type":"code","source":["function setup(){\n","    createCanvas(500, 500);\n","    background(0); //El fondo de la pantalla queda de color negro para todo ciclo\n","}\n","function draw(){\n","    fill(0); //Toda figura cerrada queda llena por el color negro\n","    stroke(255); //Los bordes de toda figura serán blancos\n","    strokeWeight(2); //Ancho de figuras quedan conformados por dos pixeles\n","    if (mouseIsPressed == true)\n","      circle(mouseX, mouseY, 50);\n","}\n","//La siguiente funciòn permite guardar el dibujo creado en formato png\n","//Para crear el archivo hay quedar clic sobre cualquier tecla.\n","function keyPressed(){\n","  save(\"Dibujo1.png\");\n","  background(0);\n","}"],"metadata":{"id":"FmBsVROC7t3u"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["![texto alternativo](https://drive.google.com/uc?id=1hbXyaodnKcoHsbVS-Js36bIpq3d720PQ)"],"metadata":{"id":"nk2vCM6MAjk6"}},{"cell_type":"markdown","source":["**Ejemplo 3.** Permitamos ahora que los cìrculos tengan radios aleatorios, la combinaciòn de colores RGB que deseemos y eliminemos el color de llenado de la figura."],"metadata":{"id":"Q-jTNCwPFTRq"}},{"cell_type":"code","source":["function setup(){\n","    createCanvas(500, 500);\n","    background(0); //El fondo de la pantalla queda de color negro para todo ciclo\n","}\n","function draw(){\n","    //fill(0); //Toda figura cerrada queda llena por el color negro\n","    noFill();\n","    stroke(20,200,200); //Los bordes pueden pintarse del color que se desee\n","    strokeWeight(2); //Ancho de figuras quedan conformados por dos pixeles\n","    if (mouseIsPressed == true)\n","      circle(mouseX, mouseY, random(10,50));\n","}\n","//La siguiente funciòn permite guardar el dibujo creado en formato png\n","//Para crear el archivo hay quedar clic sobre cualquier tecla.\n","function keyPressed(){\n","  save(\"Dibujo1.png\");\n","  background(0);\n","}"],"metadata":{"id":"g7-3J0TEFrTt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Ejemplo 4.** El siguiente ejemplo es similar al anterior pero cambiaremos el patròn del dibujo; usaremos cuadrados en lugar de circunferencias."],"metadata":{"id":"Xg6zhR6CKRls"}},{"cell_type":"code","source":["function setup(){\n","    createCanvas(500, 500);\n","    background(0); //El fondo de la pantalla queda de color negro para todo ciclo\n"," }\n","function draw(){\n","    fill(0); //Toda figura cerrada queda llena por el color negro\n","    stroke(20,200,200); //Los bordes pueden pintarse del color que se desee\n","    strokeWeight(2); //Ancho de figuras quedan conformados por dos pixeles\n","    if (mouseIsPressed == true)\n","      myPatron(mouseX, mouseY, 50);\n","}\n","//La siguiente funciòn permite guardar el dibujo creado en formato png\n","//Para crear el archivo hay quedar clic sobre cualquier tecla.\n","function keyPressed(){\n","  save(\"Dibujo1.png\");\n","  background(0);\n","}\n","function miPatron(x,y,d) //(x,y) centro del cuadrado y d el lado.\n","{\n","    //Describimos la colecciòn de vertices del cuadrado\n","    beginShape();\n","      vertex(x - d/2, y - d/2); // vertice 1\n","      vertex(x + d/2, y - d/2); // vertice 2\n","      vertex(x + d/2, y + d/2); // vertice 3\n","      vertex(x - d/2, y + d/2); // vertice 4\n","    endShape(CLOSE);\n","}"],"metadata":{"id":"hZuiIpx7SJBj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["![texto alternativo](https://drive.google.com/uc?id=112ZY65ZoRPxxCInNz83YMadKweky4G7c)\n"],"metadata":{"id":"KXHeNSDxiV3T"}},{"cell_type":"markdown","source":["**Ejemplo 5.** El còdigo siguiente es una variaciòn del anterior; haremos un desplazamiento de cada vèrtice del cuadrado demanera aleatoria, este desplazamiento lo modelaremos agregando un cuarto paràmetro $M$ a la funciòn `miPatron()`. Haremos variar el desplazamiento de manera aleatoria en el intervalo $[-M, M]$. Observe que en el còdigo $M = 10$. Una imagen interesante se obtiene con $M = 50$."],"metadata":{"id":"0MhFMUqGiqPK"}},{"cell_type":"code","source":["function setup(){\n","    createCanvas(500, 500);\n","    background(0); //El fondo de la pantalla queda de color negro para todo ciclo\n"," }\n","function draw(){\n","    fill(0); //Toda figura cerrada queda llena por el color negro\n","    stroke(20,200,200); //Los bordes pueden pintarse del color que se desee\n","    strokeWeight(2); //Ancho de figuras quedan conformados por dos pixeles\n","    if (mouseIsPressed == true)\n","      miPatron(mouseX, mouseY, 50, 10);\n","}\n","//La siguiente funciòn permite guardar el dibujo creado en formato png\n","//Para crear el archivo hay quedar clic sobre cualquier tecla.\n","function keyPressed(){\n","  save(\"Dibujo1.png\");\n","  background(0);\n","}\n","function miPatron(x,y,d,M) //(x,y) centro del cuadrado y d el lado.\n","{\n","    //Describimos la colecciòn de vertices del cuadrado\n","    beginShape();\n","      vertex(x - d/2 + random(-M,M), y - d/2 + random(-M,M)); // vertice 1\n","      vertex(x + d/2 + random(-M,M), y - d/2 + random(-M,M)); // vertice 2\n","      vertex(x + d/2 + random(-M,M), y + d/2 + random(-M,M)); // vertice 3\n","      vertex(x - d/2 + random(-M,M), y + d/2 + random(-M,M)); // vertice 4\n","    endShape(CLOSE);\n","}"],"metadata":{"id":"fyPw9vkGjeOJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["![texto alternativo](https://drive.google.com/uc?id=17zFXE9yr7wtqUUKzGu5rOVX70mLJvDoh)\n"],"metadata":{"id":"T_uSUokDlWAt"}},{"cell_type":"markdown","source":["**Ejemplo 6.** Cambie los paràmetros de diseño para cada uno de los siguiente casos:\n","\n","**i.** $M=50$.\n","\n","**ii.** $d = 20, M =\\frac{mouseY}{10}$\n"],"metadata":{"id":"B87MHkutmm01"}},{"cell_type":"markdown","source":[],"metadata":{"id":"wq84vdIwykY8"}},{"cell_type":"markdown","source":["#1.5 Creaciòn de grillas\n","\n","En esta secciòn crearemos grillas con distintos patrones.\n","\n","**Ejemplo 1.** Cree sobre la ventana de diseño (lienzo) una grilla con circulos. El nùmero de cìrculos debe ser elegido por el usuario"],"metadata":{"id":"7Aqv76jDynW2"}},{"cell_type":"code","source":["let nb = 20; //nb corresponde al nùmero de circulos.\n","let dim = 0; //dim corresponde al diametro del cìrculo. Posteriormente lo modificamos\n","function setup(){\n","    createCanvas(500, 500);\n","    dim = width/nb; // calculamos el diametro para ajustarlo al ancho de la ventana\n"," }\n","function draw(){\n","    background(0); //fondo negro\n","    noStroke(); //figuras sin bordes\n","    fill(255); //figuras llenas de blanco\n","    //A continuaciòn un doble for para pintar la grilla de cìrculos\n","    for( let j = 0; j < nb; ++j)\n","      for(let i = 0; i < nb ; ++i)\n","         circle(dim/2 + i*dim, dim/2 + j*dim, dim);\n","}"],"metadata":{"id":"4KxQ9UuXzaNl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Ejemplo 2.** Crearemos ahora una grilla con cuadrados."],"metadata":{"id":"ai9qzS083KYt"}},{"cell_type":"code","source":["let nb = 20; //nb corresponde al nùmero de rectàngulos.\n","let dim = 0; //dim corresponde al ancho y alto de los rectàngulos. Posteriormente lo modificamos\n","function setup(){\n","    createCanvas(500, 500);\n","    dim = width/nb; // calculamos la dimensiòn para ajustarla al ancho de la ventana\n"," }\n","function draw(){\n","    background(0); //fondo negro\n","    noStroke(); //figuras sin bordes\n","    fill(255); //figuras llenas de blanco\n","    rectMode(CENTER) //Redefine la referencia al dibujar un rectàngulo\n","                     //permitiendo elegir el centro en vez de la esquina superior\n","                     //izquierda\n","    for( let j = 0; j < nb; ++j)\n","      for(let i = 0; i < nb ; ++i)\n","         rect(dim/2 + i*dim, dim/2 + j*dim, 0.8*dim, 0.8*dim);\n","         //note que se multiplica por 0.8 con el fin de reducir el alto y ancho\n","         //del rectàngulo.\n","}"],"metadata":{"id":"vMKggsdV3Weh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Ejercicio 3.** Cambie los porcentajes de las alturas por 60% y 40%. Efectue otros cambios\n","\n","**Ejercicio 4.** Cambie los comandos:\n","\n","*  `noStroke();`\n","\n","* ` fill(255); `\n","\n"," por\n","\n","*  `stroke(255);`\n","*  `noFill();`\n","\n","Verifique que se obtiene.\n","\n","**Ejercicio 4.** Cree una grilla de triàngulos equilateros.\n","\n","**Ejemplo 5.** Agrege un margen a la figura y ajuste el dibujo a dicho margen."],"metadata":{"id":"VVGrCJPy51AY"}},{"cell_type":"code","source":["let nb = 20; //nb corresponde al nùmero de circulos.\n","let dim = 0; //dim corresponde al diametro del cìrculo. Posteriormente lo modificamos\n","let margen = 20; //corresponde al margen en pixeles.\n","function setup(){\n","    createCanvas(500, 500);\n","    dim = (width - 2*margen)/nb; // calculamos el diametro para ajustarlo al ancho de la ventana\n"," }\n","function draw(){\n","    background(0); //fondo negro\n","    noStroke(); //figuras sin bordes\n","    fill(255); //figuras llenas de blanco\n","    //A continuaciòn un doble for para pintar la grilla de cìrculos\n","    for( let j = 0; j < nb; ++j)\n","      for(let i = 0; i < nb ; ++i)\n","         circle(margen + dim/2 + i*dim, margen + dim/2 + j*dim, dim);\n","}"],"metadata":{"id":"kYEvagDS8cjb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Ejemplo 6.** Pinte la grilla de tal modo que el diàmetro de los cìrculos varìe en el tiempo."],"metadata":{"id":"JGLMxhon-ivL"}},{"cell_type":"code","source":["let nb = 20; //nb corresponde al nùmero de circulos.\n","let dim = 0; //dim corresponde al diametro del cìrculo. Posteriormente lo modificamos\n","let margen = 20; //corresponde al margen en pixeles.\n","let f = 0 // variable que guarda el seno de un àngulo\n","\n","\n","function setup(){\n","    createCanvas(500, 500);\n","    dim = (width - 2*margen)/nb; // calculamos el diametro para ajustarlo al ancho de la ventana\n","    angleMode(DEGREES); //Trabajo los angulos en grados.\n"," }\n","function draw(){\n","    background(0); //fondo negro\n","    noStroke(); //figuras sin bordes\n","    fill(255); //figuras llenas de blanco\n","    //A continuaciòn un doble for para pintar la grilla de cìrculos\n","    f = sin(frameCount);\n","    for( let j = 0; j < nb; ++j)\n","      for(let i = 0; i < nb ; ++i)\n","         circle(margen + dim/2 + i*dim, margen + dim/2 + j*dim, f*dim);\n","}"],"metadata":{"id":"GBkLo6JV-x7I"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Ejercicio 7.** Diseñe la grilla anterior de tal forma que se aumente la oscilaciòn de los diàmetros."],"metadata":{"id":"6Wcrd9Zl_usX"}},{"cell_type":"markdown","source":["# 1.6 Ejercicios de Repaso Anexo\n","\n","1. Use rectas, rectángulos y elipses para pintar un esquema de un rostro: cabeza, ojos, naríz y boca.\n","\n","2. Tome de referencia el ejemplo 3 de la sección 3.5.1.  Cree una ventana de 500x500 y use únicamente el comando `line` para construir la figura que se muestra a continuación.\n","\n","![texto alternativo](https://drive.google.com/uc?id=1989pUPlPWcS1hG4P5-TTd6cCr9Dz4xoH).\n","\n","3. Diseñe el código para obtener las siguientes figuras usando solo el comando `line`.\n","\n","![texto alternativo](https://drive.google.com/uc?id=1l1SfOpbFYqACXyr3M6ZlZ4_PDrxQ4Nch)\n","\n","4. Considere el ejemplo 1 de la sección 3.5.3. Saque el comando   `background(200, 100, 50)` de la función `draw()` y coloquelo como instrucción de la función `setup()`. Observe que la figura que se genera es distinta a la del ejemplo. Explique por qué se presenta esta diferencia en las imagenes.\n","\n","5. Rediseñe el programa de los ejercicios 2. y 3. usando el comando `delay()` con el fin tener una construcción dinámica de las figuras.\n","\n","6. Haga una aproximación del valor de $\\pi$, usando como referencia el Ejemplo 2 de la sección 3.5.3. Para este ejercicio, agrege a la imagen del ejemplo 2 una circunferencia centrada en el punto $C(200,200)$ y de radio $r = 200$ y permita que el código calcule el número de puntos que caen dentro de la circunferencia. Use la relación $$\\frac{A(C)}{A(R)} \\approx \\frac{\\text{Numero de puntos dentro de circunferencia}}{\\text{Numero total de puntos}}  $$ donce $A(C)=\\pi r^2$ y $A(R) = 200\\times 200$.\n","\n"],"metadata":{"id":"vEMVbcQtq8PD"}}]}